package radio

import (
	"encoding/hex"
	"fmt"
)

var eeprom = []byte{
	0x30, 0x35, 0x38, 0x33, 0x32, 0x31, 0x53, 0x30, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0x27, 0x4A, 0x06, 0x34, 0x34, 0x7B, 0x22, 0x0F, 0x75, 0x5B, 0x54, 0x8F, 0x0C, 0x54, 0x1A, 0x37,
	0x73, 0x31, 0x75, 0x0D, 0x2A, 0x4A, 0xFF, 0x28, 0x82, 0x26, 0xFD, 0x37, 0x16, 0x21, 0x92, 0x58, 0x90, 0xEB, 0xDA, 0x67, 0xB0, 0xD2,
	0xFE, 0xB8, 0x86, 0x56, 0xB6, 0x69, 0x75, 0x2D, 0xD2, 0x8A, 0x0E, 0x09, 0xFF, 0x09, 0xFF, 0x0A, 0xF0, 0xA9, 0xFF, 0xFF, 0xFF, 0x07,
	0xFF, 0xFF, 0x88, 0x96, 0xFF, 0x01, 0xFF, 0x00, 0x02, 0x6D, 0x05, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6E, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xE0, 0x00, 0x00, 0xFF, 0x00, 0x04, 0x01, 0x0B, 0x0A, 0x03, 0x0E, 0xFF, 0x6D, 0xFF, 0xF9, 0xFF, 0xFA, 0x00, 0x00, 0xE2, 0x00,
	0x5E, 0xE8, 0xFF, 0x5E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA6, 0x6A, 0xDE, 0x07,
}

func GenerateCodes(vin string) ([][]byte, error) {
	var out [][]byte
	for _, str := range []string{"FF", "E2"} {
		code, err := hex.DecodeString(fmt.Sprintf("%c%c%c%c%s%c%c", vin[1], vin[2], vin[5], vin[0], str, vin[3], vin[4]))
		if err != nil {
			return nil, err
		}
		out = append(out, code)
	}
	return out, nil
}

func GenerateBin(codes [][]byte) []byte {
	out := make([]byte, len(eeprom))
	copy(out, eeprom)
	for i := 0; i < 2; i++ {
		for j, c := range codes[i] {
			out[0x86+(i*0x10)+j] = c
		}
	}
	return out
}
